name: CI - Dockerize and Push to ECR

on:
    push:
        branches:
          - main
        tags:
          - '*'

env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    AWS_REGION: eu-north-1  # Specify the AWS region
    CLUSTER_NAME: cicd-demo
    SERVICE_NAME: mentee-robot

jobs:
    build-and-push:
        runs-on: ubuntu-latest

        steps:
            # Checkout the repository
            - name: Checkout code
              uses: actions/checkout@v3

            # # Configure AWS credentials using access token
            # - name: Configure AWS credentials
            #   run: |
            #     echo "AWS credentials and region configured"

            # Log in to Amazon ECR
            - name: Log in to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            # Set up Docker image name and tag
            - name: Set up image name
              id: image-name
              run: |
                echo "IMAGE_NAME=mentee-robot" >> $GITHUB_ENV
                if [[ "${{ github.ref_type }}" == "tag" ]]; then
                  echo "IMAGE_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
                elif [[ "${{ github.ref_type }}" == "branch" ]]; then
                  BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's|/|_|g')
                  echo "IMAGE_TAG=${BRANCH_NAME}-${{ github.sha }}" >> $GITHUB_ENV
                else
                  echo "IMAGE_TAG=latest-${{ github.sha }}" >> $GITHUB_ENV
                fi
                echo "ECR_REPOSITORY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com/mentee-robot" >> $GITHUB_ENV

            # Build the Docker image
            - name: Build Docker image
              run: |
                docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

            # Push the Docker image to Amazon ECR
            - name: Push Docker image to ECR
              run: |
                docker push $ECR_REPOSITORY:$IMAGE_TAG

    update-ecs-task:
        needs: build-and-push
        if: startsWith(github.ref, 'refs/tags/')
        runs-on: ubuntu-latest
        steps:
            # Configure AWS credentials
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
            # Update ECS service to use the new image
            - name: Update ECS service
              run: |
                CLUSTER_NAME="${{ env.CLUSTER_NAME }}"
                SERVICE_NAME="${{ env.SERVICE_NAME }}"
                NEW_IMAGE="$ECR_REPOSITORY:$IMAGE_TAG"

                # Get the current task definition
                CURRENT_TASK_DEF=$(aws ecs describe-services \
                  --cluster $CLUSTER_NAME \
                  --services $SERVICE_NAME \
                  --query "services[0].taskDefinition" \
                  --output text)

                # Get the container definitions from the current task definition
                CONTAINER_DEFINITIONS=$(aws ecs describe-task-definition \
                  --task-definition $CURRENT_TASK_DEF \
                  --query "taskDefinition.containerDefinitions" \
                  --output json)

                # Update the container image in the container definitions
                UPDATED_CONTAINER_DEFINITIONS=$(echo $CONTAINER_DEFINITIONS | jq \
                  --arg IMAGE "$NEW_IMAGE" \
                  '.[0].image = $IMAGE | [.]')

                # Register a new task definition with the updated container image
                NEW_TASK_DEF=$(aws ecs register-task-definition \
                  --family $(echo $CURRENT_TASK_DEF | cut -d'/' -f2 | cut -d':' -f1) \
                  --container-definitions "$UPDATED_CONTAINER_DEFINITIONS" \
                  --query "taskDefinition.taskDefinitionArn" \
                  --output text)

                # Update the ECS service to use the new task definition
                aws ecs update-service \
                  --cluster $CLUSTER_NAME \
                  --service $SERVICE_NAME \
                  --task-definition $NEW_TASK_DEF \
                  --force-new-deployment \
                  --output json